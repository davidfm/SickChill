# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  test:
    strategy:
      matrix:
        python-version: [2.7]
#        os: [ubuntu-latest, windows-latest, macOS-latest]  # Problem with macos because of grep
        os: [ubuntu-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set up Node
      uses: actions/setup-node@v1
      with:
        node-version: '12.x'
    - name: windows build tools
      if: contains(matrix.os, 'windows-latest')
      run |
        npm install -g windows-build-tools
    - name: Determine npm cache directory
      id: npm-cache
      run: |
        echo "::set-output name=dir::$(npm config get cache)"
    - name: Restore npm cache
      uses: actions/cache@v1
      with:
        path: ${{ steps.npm-cache.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - name: Restore yarn cache
      uses: actions/cache@v1
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: Restore pip cache
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        npm install -g xo
        npm install --quiet
        pip install --upgrade pip tox babel crowdin-cli-py
    - name: Get tox workdir
      id: tox-workdir-path
      run: echo "::set-output name=dir::$(tox --showconfig | grep -Po '(?<=^toxworkdir = ).*$')"
    - name: Restore tox workdir
      uses: actions/cache@v1
      with:
        path: ${{ steps.tox-workdir-path.outputs.dir }}
        key: ${{ runner.os }}-tox-${{ hashFiles('**/tox.ini') }}
        restore-keys: |
          ${{ runner.os }}-tox-
    - name: Test with XO
      run: xo
    - name: Test with tox
      run: tox -v --recreate -e "py27-{flake8,linux}"
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Set up Docker Buildx
      if: success()
      id: buildx
      uses: crazy-max/ghaction-docker-buildx@v1
      with:
        version: latest
    - name: Available platforms
      if: success()
      run: echo ${{ steps.buildx.outputs.platforms }}
    - name: Prepare
      if: success()
      id: prepare
      run: |
        echo ::set-output name=docker_platforms::linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/386,linux/ppc64le,linux/s390x
        echo ::set-output name=docker_username::miigotu
        echo ::set-output name=docker_image::miigotu/sickchill
        echo ::set-output name=version::${GITHUB_REF#refs/*/}
    - name: Docker Login
      if: success()
      env:
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "${DOCKER_PASSWORD}" | docker login --username "${{ steps.prepare.outputs.docker_username }}" --password-stdin index.docker.io
    - name: Run Buildx (master)
      if: success() && contains(steps.prepare.outputs.version, 'master')
      run: |
        docker buildx build \
          --output "type=image,push=true" \
          --platform linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x \
          --tag "${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}" \
          --tag "${{ steps.prepare.outputs.docker_image }}:latest" \
          --file Dockerfile .
    - name: Run Buildx (non-master)
      if: success() && !contains(steps.prepare.outputs.version, 'master')
      run: |
        docker buildx build \
          --output "type=image,push=true" \
          --platform linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x \
          --tag "${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}" \
          --file Dockerfile .
